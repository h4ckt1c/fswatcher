#!/bin/bash

PLATFORM=$(uname)
if [ "$PLATFORM" == "Darwin" ]; then
    statcmd="stat -f %z"
elif [ "$PLATFORM" == "Linux" ]; then
    statcmd="stat --format=%z"
fi
ctrl_c() {
    echo "[*] Caught ctrl-c, exiting..."
    kill $pid > /dev/null 2>&1
    wait $pid 2>/dev/null
    exit
}
pid=
trap "ctrl_c $pid" INT

# setup args
[ ! -z "$3" ] && args="$3" || args=

if [ -z "$1" ] || [ -z "$2" ]; then
    echo -e "\nUsage: $0 <command> <filename> [args]"
    echo -e "  <command>\tWhich command should execute filename?!"
    echo -e "  <filename>\tWhich file should be monitored for changes?!"
    echo -e "  [args]\tArguments for script (optinal)"
    echo
    echo -e "Example: '$0 python test.py' will monitor test.py and trigger 'python test.py' on change\n"
    exit
fi
if ! which $1 2>&1 > /dev/null; then
    echo -e "Error, $2 not found (in \$PATH)\nExiting..." && exit
fi
if [ ! -r $2 ]; then
    echo -e "Error, $2 not readable\nExiting..." && exit
fi

$1 $2 $args&
pid=$!
died=1

while ((1)); do
    if ! ps -p $pid 2>&1 > /dev/null && [ ! -z $died ]; then
        echo -e "\n[*] $pid Died\n"
        died=
    fi
#     oldval=$(stat --format="%z" $2)
    oldval=$(eval ${statcmd} $2)
    sleep 1
#     newval=$(stat --format="%z" $2)
    newval=$(eval ${statcmd} $2)
    if [ "$newval" != "$oldval" ]; then
        if [ ! -z $pid ]; then
            if ps -p $pid 2>&1 > /dev/null; then
                kill $pid
                wait $pid 2>/dev/null
                echo -e "\n[*] pid $pid killed\n"
            fi
        fi
        $1 $2 $args &
        pid=$!
        died=$pid
        echo -e "\n#####################################################################\n"
    fi
done
